use aidoku::{
	prelude::format,
    std::{String, html::Node, Vec},
};

/// Returns an array of f32s contained within a string.
pub fn extract_f32_from_string(text: String) -> Vec<f32> {
	let mut last_char_was_digit: bool = false;
	text.chars()
		.filter(|a| {
			if (*a).is_ascii_digit() {
				last_char_was_digit = true;
				return true;
			} else if *a == '.' && last_char_was_digit || *a == '+' || *a == ' ' {
				last_char_was_digit = false;
				return true;
			}
			false
		})
		.collect::<String>()
		.split(' ')
		.filter_map(|a| a.parse::<f32>().ok())
		.collect::<Vec<f32>>()
}

/// Adds https: to the start of a URL if it is missing.
///
/// Mostly useful for URLs such as `//www.google.com` where the intent is
/// to use the current protocol.
pub fn append_protocol(url: String) -> String {
    if !url.starts_with("http") {
        return format!("{}{}", "https:", url);
    } else {
        return url;
    }
}

/// Percent-encode any non-ASCII characters in a string.
pub fn urlencode(string: String) -> String {
    let mut result: Vec<u8> = Vec::with_capacity(string.len() * 3);
    let hex = "0123456789ABCDEF".as_bytes();
    let bytes = string.as_bytes();
    
    for byte in bytes {
        let curr = *byte;
        if curr.is_ascii_alphanumeric() {
            result.push(curr);
        } else {
            result.push(b'%');
            result.push(hex[curr as usize >> 4]);
            result.push(hex[curr as usize & 15]);
        }
    }
    String::from_utf8(result).unwrap_or_default()
}

/// Converts `<br>` into newlines.
pub fn text_with_newlines(node: Node) -> String {
	let html = node.html().read();
	if !String::from(html.trim()).is_empty() {
		Node::new_fragment(
			node.html()
				.read()
				.replace("<br>", "{{ .LINEBREAK }}")
				.as_bytes(),
		)
		.text()
		.read()
		.replace("{{ .LINEBREAK }}", "\n")
	} else {
		String::new()
	}
}
